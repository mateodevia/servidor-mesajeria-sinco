{"version":3,"sources":["media/LogoSinco.svg","components/Navbar/Navbar.jsx","components/Login/Login.jsx","App.js","serviceWorker.js","index.js"],"names":["module","exports","withRouter","props","useEffect","window","sessionStorage","username","history","push","className","src","Logo","selected","onClick","inputRef","useRef","Fragment","ref","type","placeholder","current","value","alert","useState","socket","socketIOClient","on","console","log","emit","update","exact","path","render","Boolean","location","hostname","match","createBrowserHistory","ReactDOM","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"wFAAAA,EAAOC,QAAU,IAA0B,uC,sSCsC5BC,mBAjCf,SAAgBC,GAMZ,OALAC,qBAAU,WACDC,OAAOC,eAAeC,UACvBJ,EAAMK,QAAQC,KAAK,OAExB,IAEC,yBAAKC,UAAU,mBACX,yBAAKA,UAAU,OAAOC,IAAKC,MAC3B,yBACIF,UACuB,gBAAnBP,EAAMU,SACA,iBACA,QAEVC,QAAS,kBAAMX,EAAMK,QAAQC,KAAK,kBANtC,gBAUA,yBACIC,UACuB,iBAAnBP,EAAMU,SACA,iBACA,QAEVC,QAAS,kBAAMX,EAAMK,QAAQC,KAAK,mBANtC,qB,MCWGP,mBA/Bf,SAAeC,GACX,IAAIY,EAAWC,mBAUf,OACI,kBAAC,IAAMC,SAAP,KACI,yBAAKP,UAAU,kBACX,0CACA,uHAIA,2BACIQ,IAAKH,EACLI,KAAK,OACLC,YAAY,8BAEhB,6BACA,4BAAQN,QAtBF,WACiB,KAA3BC,EAASM,QAAQC,MACjBC,MAAM,4BAENlB,OAAOC,eAAeC,SAAWQ,EAASM,QAAQC,MAClDnB,EAAMK,QAAQC,KAAK,mBAiBf,eCmCDP,mBAzDf,SAAaC,GAAQ,IAAD,EACcqB,mBAAS,cADvB,mBAGZC,GAHY,UAGHC,IACT,qDAcJ,OAXAtB,qBAAU,WACNqB,EAAOE,GAAG,WAAW,WACjBC,QAAQC,IAAI,uBAEZJ,EAAOK,KAAK,aAAc,iBAE9BL,EAAOE,GAAG,UAAU,SAACI,GACjBH,QAAQC,IAAI,SAAUE,QAE3B,IAGC,6BACI,kBAAC,IAAD,KACI,kBAAC,IAAD,CACIC,OAAK,EACLC,KAAK,IACLC,OAAQ,WACJ,OAAO,kBAAC,EAAD,SAGf,kBAAC,IAAD,CACIF,OAAK,EACLC,KAAK,eACLC,OAAQ,WACJ,OACI,kBAAC,IAAMjB,SAAP,KACI,kBAAC,EAAD,CAAQJ,SAAU,gBAClB,yBAAKH,UAAU,WAAf,oBAKhB,kBAAC,IAAD,CACIsB,OAAK,EACLC,KAAK,gBACLC,OAAQ,WACJ,OACI,kBAAC,IAAMjB,SAAP,KACI,kBAAC,EAAD,CAAQJ,SAAU,iBAClB,yBAAKH,UAAU,WAAf,0BC1CZyB,QACW,cAA7B9B,OAAO+B,SAASC,UAEe,UAA7BhC,OAAO+B,SAASC,UAEhBhC,OAAO+B,SAASC,SAASC,MACvB,2DCVN,IAAM9B,EAAU+B,cAEhBC,IAASN,OACL,kBAAC,IAAMO,WAAP,KACI,kBAAC,IAAD,CAAQjC,QAASA,GACb,kBAAC,EAAD,CAAKA,QAASA,MAGtBkC,SAASC,eAAe,SDmHtB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLvB,QAAQuB,MAAMA,EAAMC,c","file":"static/js/main.69d2980d.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/LogoSinco.62291b0f.svg\";","import React, { useEffect } from 'react';\r\nimport { withRouter } from 'react-router-dom';\r\nimport '../Navbar/Navbar.css';\r\nimport Logo from '../../media/LogoSinco.svg';\r\n\r\nfunction Navbar(props) {\r\n    useEffect(() => {\r\n        if (!window.sessionStorage.username) {\r\n            props.history.push('/');\r\n        }\r\n    }, []);\r\n    return (\r\n        <div className='headerContainer'>\r\n            <img className='logo' src={Logo} />\r\n            <div\r\n                className={\r\n                    props.selected === 'misProcesos'\r\n                        ? 'selected title'\r\n                        : 'title'\r\n                }\r\n                onClick={() => props.history.push('/misprocesos')}\r\n            >\r\n                Mis Procesos\r\n            </div>\r\n            <div\r\n                className={\r\n                    props.selected === 'crearProceso'\r\n                        ? 'selected title'\r\n                        : 'title'\r\n                }\r\n                onClick={() => props.history.push('/crearproceso')}\r\n            >\r\n                Crear Proceso\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default withRouter(Navbar);\r\n","import React, { useRef } from 'react';\r\nimport '../Login/Login.css';\r\nimport { withRouter } from 'react-router-dom';\r\n\r\nfunction Login(props) {\r\n    let inputRef = useRef();\r\n\r\n    let handleClick = () => {\r\n        if (inputRef.current.value === '') {\r\n            alert('El usuario no es valido');\r\n        } else {\r\n            window.sessionStorage.username = inputRef.current.value;\r\n            props.history.push('/misprocesos');\r\n        }\r\n    };\r\n    return (\r\n        <React.Fragment>\r\n            <div className='loginContainer'>\r\n                <h1>Bienvenido</h1>\r\n                <h2>\r\n                    Para ingresar al manejador de procesos de Sincosoft ingrese\r\n                    su identificador de usuario\r\n                </h2>\r\n                <input\r\n                    ref={inputRef}\r\n                    type='text'\r\n                    placeholder='Identificador del usuario'\r\n                />\r\n                <br />\r\n                <button onClick={handleClick}>Entrar</button>\r\n            </div>\r\n        </React.Fragment>\r\n    );\r\n}\r\n\r\nexport default withRouter(Login);\r\n","import React, { useEffect, useState } from 'react';\nimport socketIOClient from 'socket.io-client';\nimport './App.css';\nimport { Switch, Route, withRouter } from 'react-router-dom';\nimport Navbar from './components/Navbar/Navbar';\nimport Login from './components/Login/Login';\n\nfunction App(props) {\n    let [clientId, setClientId] = useState('1018505033');\n\n    let socket = socketIOClient(\n        'https://prueba-sinco-componente-a.herokuapp.com/'\n    );\n\n    useEffect(() => {\n        socket.on('connect', () => {\n            console.log('Main socket opnened');\n            // Envia mensaje con identificacion para que el servidor le cree una room\n            socket.emit('suscribeTo', '1018505033');\n        });\n        socket.on('update', (update) => {\n            console.log('update', update);\n        });\n    }, []);\n\n    return (\n        <div>\n            <Switch>\n                <Route\n                    exact\n                    path='/'\n                    render={() => {\n                        return <Login />;\n                    }}\n                />\n                <Route\n                    exact\n                    path='/misprocesos'\n                    render={() => {\n                        return (\n                            <React.Fragment>\n                                <Navbar selected={'misProcesos'} />\n                                <div className='testApp'>Mis Procesos</div>\n                            </React.Fragment>\n                        );\n                    }}\n                />\n                <Route\n                    exact\n                    path='/crearproceso'\n                    render={() => {\n                        return (\n                            <React.Fragment>\n                                <Navbar selected={'crearProceso'} />\n                                <div className='testApp'>Crear Proceso</div>\n                            </React.Fragment>\n                        );\n                    }}\n                />\n            </Switch>\n        </div>\n    );\n}\n\nexport default withRouter(App);\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Router } from 'react-router-dom';\nimport { createBrowserHistory } from 'history';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nconst history = createBrowserHistory();\n\nReactDOM.render(\n    <React.StrictMode>\n        <Router history={history}>\n            <App history={history} />\n        </Router>\n    </React.StrictMode>,\n    document.getElementById('root')\n);\nserviceWorker.unregister();\n"],"sourceRoot":""}