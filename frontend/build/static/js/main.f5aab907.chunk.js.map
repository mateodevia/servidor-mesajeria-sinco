{"version":3,"sources":["media/LogoSinco.svg","components/Navbar/Navbar.jsx","components/Login/Login.jsx","components/Processes/Processes.jsx","components/CreateProcess/CreateProcess.jsx","App.js","serviceWorker.js","index.js"],"names":["module","exports","withRouter","props","useEffect","window","sessionStorage","username","history","push","className","src","Logo","onClick","selected","inputRef","useRef","Fragment","ref","type","placeholder","current","value","alert","useState","undefined","processes","setProcesses","updatedProcess","setUpdatedProcess","calculatePercentage","process","exitosos","fallidos","cantidad","socket","socketIOClient","fetch","then","response","json","data","on","console","log","emit","update","close","newProcesses","i","tipo","length","map","key","style","width","esperando","setEsperando","typeRef","quantityRef","disabled","method","headers","body","JSON","stringify","quantity","parseInt","error","msg","exact","path","render","Boolean","location","hostname","match","createBrowserHistory","ReactDOM","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","message"],"mappings":"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","file":"static/js/main.f5aab907.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/LogoSinco.62291b0f.svg\";","import React, { useEffect } from 'react';\r\nimport { withRouter } from 'react-router-dom';\r\nimport '../Navbar/Navbar.css';\r\nimport Logo from '../../media/LogoSinco.svg';\r\n\r\nfunction Navbar(props) {\r\n    useEffect(() => {\r\n        if (!window.sessionStorage.username) {\r\n            props.history.push('/');\r\n        }\r\n    }, []);\r\n    return (\r\n        <div className='headerContainer'>\r\n            <img\r\n                className='logo'\r\n                src={Logo}\r\n                onClick={() => props.history.push('/')}\r\n            />\r\n            <div\r\n                className={\r\n                    props.selected === 'misProcesos'\r\n                        ? 'selected title'\r\n                        : 'title'\r\n                }\r\n                onClick={() => props.history.push('/misprocesos')}\r\n            >\r\n                Mis Procesos\r\n            </div>\r\n            <div\r\n                className={\r\n                    props.selected === 'crearProceso'\r\n                        ? 'selected title'\r\n                        : 'title'\r\n                }\r\n                onClick={() => props.history.push('/crearproceso')}\r\n            >\r\n                Crear Proceso\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default withRouter(Navbar);\r\n","import React, { useRef } from 'react';\r\nimport '../Login/Login.css';\r\nimport { withRouter } from 'react-router-dom';\r\n\r\nfunction Login(props) {\r\n    let inputRef = useRef();\r\n\r\n    let handleClick = () => {\r\n        if (inputRef.current.value === '') {\r\n            alert('El usuario no es valido');\r\n        } else {\r\n            window.sessionStorage.username = inputRef.current.value;\r\n            props.history.push('/misprocesos');\r\n        }\r\n    };\r\n    return (\r\n        <React.Fragment>\r\n            <div className='loginContainer'>\r\n                <h1>Bienvenido</h1>\r\n                <h2>\r\n                    Para ingresar al manejador de procesos de Sincosoft ingrese\r\n                    su identificador de usuario\r\n                </h2>\r\n                <input\r\n                    ref={inputRef}\r\n                    type='text'\r\n                    placeholder='Identificador del usuario'\r\n                />\r\n                <br />\r\n                <button onClick={handleClick}>Entrar</button>\r\n            </div>\r\n        </React.Fragment>\r\n    );\r\n}\r\n\r\nexport default withRouter(Login);\r\n","import React, { useEffect, useState } from 'react';\r\nimport '../Processes/Processes.css';\r\nimport { withRouter } from 'react-router-dom';\r\nimport socketIOClient from 'socket.io-client';\r\n\r\nfunction Processes(props) {\r\n    let [processes, setProcesses] = useState(undefined);\r\n    let [updatedProcess, setUpdatedProcess] = useState(undefined);\r\n\r\n    let calculatePercentage = (process) => {\r\n        let completed = process.exitosos + process.fallidos;\r\n        let percentage = (completed * 100) / process.cantidad;\r\n        return percentage + '%';\r\n    };\r\n\r\n    let socket = socketIOClient('/');\r\n\r\n    useEffect(() => {\r\n        fetch(`/clients/${window.sessionStorage.username}/processes`).then(\r\n            (response) => {\r\n                response.json().then((data) => {\r\n                    setProcesses(data);\r\n                });\r\n            }\r\n        );\r\n        socket.on('connect', () => {\r\n            console.log('Main socket opnened');\r\n            // Envia mensaje con identificacion para que el servidor le cree una room\r\n            socket.emit('suscribeTo', window.sessionStorage.username);\r\n        });\r\n        socket.on('update', (update) => {\r\n            setUpdatedProcess(update);\r\n        });\r\n        return () => socket.close();\r\n    }, []);\r\n\r\n    useEffect(() => {\r\n        if (processes) {\r\n            let newProcesses = [...processes];\r\n            for (let i in newProcesses) {\r\n                if (newProcesses[i].tipo === updatedProcess.tipo) {\r\n                    newProcesses[i] = updatedProcess;\r\n                }\r\n            }\r\n            console.log(updatedProcess);\r\n            console.log(newProcesses);\r\n            setProcesses(newProcesses);\r\n        }\r\n    }, [updatedProcess]);\r\n\r\n    return (\r\n        <div className='processesContainer'>\r\n            <h1>Mis Procesos</h1>\r\n            {!processes && <h4>Cargando...</h4>}\r\n            {processes?.length === 0 && <h4>No hay procesos activos</h4>}\r\n            {processes?.map((process, i) => (\r\n                <div key={i} className='processContainer'>\r\n                    <h3>{process.tipo}</h3>\r\n                    <div className='processFlex'>\r\n                        <div className='statisticContainer'>\r\n                            <div className='greenCircle'></div>\r\n                            <h5>Exitosos: {process.exitosos}</h5>\r\n                        </div>\r\n                        <div className='statisticContainer'>\r\n                            <div className='redCircle'></div>\r\n                            <h5>Fallidos: {process.fallidos}</h5>\r\n                        </div>\r\n                    </div>\r\n                    <div className='progressBar'>\r\n                        <div\r\n                            style={{ width: calculatePercentage(process) }}\r\n                        ></div>\r\n                    </div>\r\n                </div>\r\n            ))}\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default withRouter(Processes);\r\n","import React, { useRef, useState } from 'react';\r\nimport './CreateProcess.css';\r\nimport { withRouter } from 'react-router-dom';\r\n\r\nfunction CreateProcess(props) {\r\n    let [esperando, setEsperando] = useState(false);\r\n\r\n    let typeRef = useRef();\r\n    let quantityRef = useRef();\r\n\r\n    let createProcess = () => {\r\n        if (typeRef.current.value != '' && quantityRef.current.value != '') {\r\n            setEsperando(true);\r\n            fetch(`/clients/${window.sessionStorage.username}/processes`, {\r\n                method: 'POST',\r\n                headers: { 'Content-Type': 'application/json' },\r\n                body: JSON.stringify({\r\n                    type: typeRef.current.value,\r\n                    quantity: parseInt(quantityRef.current.value),\r\n                }),\r\n            }).then((response) => {\r\n                response.json().then((data) => {\r\n                    if (data.error) {\r\n                        alert(data.error);\r\n                    } else {\r\n                        alert(data.msg);\r\n                        setEsperando(false);\r\n                    }\r\n                });\r\n            });\r\n        } else {\r\n            alert('Porfavor llene todosl los campos');\r\n        }\r\n    };\r\n\r\n    return (\r\n        <div className='createProcessContainer'>\r\n            <h1>Crear Proceso</h1>\r\n            <h3>\r\n                Por favor ingrese el tipo de proceso, y la cantidad de procesos\r\n                que quiere mandar a ejecutar\r\n            </h3>\r\n            <input\r\n                ref={typeRef}\r\n                type='text'\r\n                placeholder='Tipo de proceso'\r\n                disabled={esperando}\r\n            />\r\n            <input\r\n                ref={quantityRef}\r\n                type='number'\r\n                placeholder='Cantidad'\r\n                disabled={esperando}\r\n            />\r\n            <button disabled={esperando} onClick={createProcess}>\r\n                Crear\r\n            </button>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default withRouter(CreateProcess);\r\n","import React, { useEffect, useState } from 'react';\nimport './App.css';\nimport { Switch, Route, withRouter } from 'react-router-dom';\nimport Navbar from './components/Navbar/Navbar';\nimport Login from './components/Login/Login';\nimport Processes from './components/Processes/Processes';\nimport CreateProcess from './components/CreateProcess/CreateProcess';\n\nfunction App(props) {\n    return (\n        <div>\n            <Switch>\n                <Route\n                    exact\n                    path='/'\n                    render={() => {\n                        return <Login />;\n                    }}\n                />\n                <Route\n                    path='/misprocesos'\n                    render={() => {\n                        return (\n                            <React.Fragment>\n                                <Navbar selected={'misProcesos'} />\n                                <Processes />\n                            </React.Fragment>\n                        );\n                    }}\n                />\n                <Route\n                    path='/crearproceso'\n                    render={() => {\n                        return (\n                            <React.Fragment>\n                                <Navbar selected={'crearProceso'} />\n                                <CreateProcess />\n                            </React.Fragment>\n                        );\n                    }}\n                />\n            </Switch>\n        </div>\n    );\n}\n\nexport default withRouter(App);\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Router } from 'react-router-dom';\nimport { createBrowserHistory } from 'history';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nconst history = createBrowserHistory();\n\nReactDOM.render(\n    <React.StrictMode>\n        <Router history={history}>\n            <App history={history} />\n        </Router>\n    </React.StrictMode>,\n    document.getElementById('root')\n);\nserviceWorker.unregister();\n"],"sourceRoot":""}